#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_SIZE 100

struct Stack {
    int top;
    char array[MAX_SIZE];
};


void initializeStack(struct Stack* stack) {
    stack->top = -1;
}

int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

int isFull(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

void push(struct Stack* stack, char value) {
    if (isFull(stack)) {
        printf("Stack Overflow!\n");
        exit(EXIT_FAILURE);
    }

    stack->array[++stack->top] = value;
}

char pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow!\n");
        exit(EXIT_FAILURE);
    }

    return stack->array[stack->top--];
}

int getPrecedence(char operator) {
    if (operator == '+' || operator == '-')
        return 1;
    else if (operator == '*' || operator == '/')
        return 2;
    else
        return 0; 
}

void infixToPostfix(const char* infixExpression, char* postfixExpression) {
    struct Stack stack;
    initializeStack(&stack);

    int i, j;
    for (i = 0, j = 0; i < strlen(infixExpression); i++) {
        char currentChar = infixExpression[i];

        if (isalnum(currentChar)) {
            postfixExpression[j++] = currentChar;  
        } else if (currentChar == '(') {
            push(&stack, currentChar);
        } else if (currentChar == ')') {
            while (!isEmpty(&stack) && stack.array[stack.top] != '(') {
                postfixExpression[j++] = pop(&stack);
            }
            pop(&stack);  // Pop '(' from the stack
        } else { 
            while (!isEmpty(&stack) && getPrecedence(stack.array[stack.top]) >= getPrecedence(currentChar)) {
                postfixExpression[j++] = pop(&stack);
            }
            push(&stack, currentChar);
        }
    }

    
    while (!isEmpty(&stack)) {
        postfixExpression[j++] = pop(&stack);
    }

    postfixExpression[j] = '\0'; 
}

int main() {
    const char* infixExpression = "a+b*(c-d/e)";
    char postfixExpression[MAX_SIZE];

    infixToPostfix(infixExpression, postfixExpression);

    printf("Infix Expression: %s\n", infixExpression);
    printf("Postfix Expression: %s\n", postfixExpression);

    return 0;
}
