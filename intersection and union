//finding the union and intersection of two linked list
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of the linked list
void insertNode(struct Node** head, int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

// Function to find the intersection of two linked lists
struct Node* findIntersection(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp1 = list1;

    while (temp1 != NULL) {
        struct Node* temp2 = list2;
        while (temp2 != NULL) {
            if (temp1->data == temp2->data) {
                insertNode(&result, temp1->data);
                break;
            }
            temp2 = temp2->next;
        }
        temp1 = temp1->next;
    }

    return result;
}
// Function to check if a value is already present in the linked list
int contains(struct Node* head, int value) {
    struct Node* temp = head;
    while (temp != NULL) {
        if (temp->data == value) {
            return 1; // true, value is present
        }
        temp = temp->next;
    }
    return 0; // false, value is not present
}



// Function to find the union of two linked lists
struct Node* findUnion(struct Node* list1, struct Node* list2) {
    struct Node* result = NULL;
    struct Node* temp1 = list1;
    struct Node* temp2 = list2;

    while (temp1 != NULL) {
        insertNode(&result, temp1->data);
        temp1 = temp1->next;
    }

    while (temp2 != NULL) {
        if (!contains(result, temp2->data)) {
            insertNode(&result, temp2->data);
        }
        temp2 = temp2->next;
    }

    return result;
}


// Function to print the elements of a linked list
void printList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    // Populate linked lists
    insertNode(&list1, 1);
    insertNode(&list1, 2);
    insertNode(&list1, 3);
    insertNode(&list1, 4);

    insertNode(&list2, 1);
    insertNode(&list2, 2);
    insertNode(&list2, 5);
    insertNode(&list2, 6);

    // Find and print intersection
    struct Node* intersection = findIntersection(list1, list2);
    printf("Intersection: ");
    printList(intersection);

    // Find and print union
    struct Node* unionResult = findUnion(list1, list2);
    printf("Union: ");
    printList(unionResult);

    return 0;
}
