#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_SIZE 100

struct Stack {
    int top;
    int array[MAX_SIZE];
};

void initializeStack(struct Stack* stack) {
    stack->top = -1;
}

int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

int isFull(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

void push(struct Stack* stack, int value) {
    if (isFull(stack)) {
        printf("Stack Overflow!\n");
        exit(EXIT_FAILURE);
    }

    stack->array[++stack->top] = value;
}

int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow!\n");
        exit(EXIT_FAILURE);
    }

    return stack->array[stack->top--];
}

int evaluatePostfix(const char* expression) {
    struct Stack stack;
    initializeStack(&stack);

    for (int i = 0; i < strlen(expression); i++) {
        if (isdigit(expression[i])) {
            push(&stack, expression[i] - '0');
        } else {
            int operand2 = pop(&stack);
            int operand1 = pop(&stack);

            switch (expression[i]) {
                case '+':
                    push(&stack, operand1 + operand2);
                    break;
                case '-':
                    push(&stack, operand1 - operand2);
                    break;
                case '*':
                    push(&stack, operand1 * operand2);
                    break;
                case '/':
                    push(&stack, operand1 / operand2);
                    break;
                default:
                    printf("Invalid character in the expression: %c\n", expression[i]);
                    exit(EXIT_FAILURE);
            }
        }
    }

    
    int result = pop(&stack);
    return result;
}

int main() {
    const char* postfixExpression = "23*5+";
    int result = evaluatePostfix(postfixExpression);

    printf("Result of postfix expression %s is: %d\n", postfixExpression, result);

    return 0;
}
